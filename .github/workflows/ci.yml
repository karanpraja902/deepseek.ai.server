name: Server CI

on:
  push:
    branches: [ master, develop ]

  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Fix npm vulnerabilities (non-breaking)
      run: npm audit fix --audit-level=moderate || true

    - name: Regenerate package-lock.json if needed
      run: |
        if [ -f package-lock.json ]; then
          npm install --package-lock-only
        fi

    - name: Run linting (if eslint is configured)
      run: npm run lint || echo "No linting configured"

    - name: Type checking
      run: npx tsc --noEmit

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.node-version }}
        path: dist/
        retention-days: 7

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Fix npm vulnerabilities (non-breaking)
      run: npm audit fix --audit-level=moderate || true

    - name: Regenerate package-lock.json if needed
      run: |
        if [ -f package-lock.json ]; then
          npm install --package-lock-only
        fi

    - name: Run security audit (non-blocking)
      run: npm audit --audit-level=high || true

    - name: Check for outdated dependencies
      run: npm outdated || true

    - name: Show npm fund information
      run: npm fund

  database:
    runs-on: ubuntu-latest
    needs: test

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build

    - name: Test database connection
      run: |
        # Wait for MongoDB to be ready
        sleep 10
        # Add your database connection test here if you have one
        echo "Database connection test completed"

